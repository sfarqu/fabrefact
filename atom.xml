<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fabrefact</title>
  
  <subtitle>a blog by Sara Farquharson</subtitle>
  <link href="/fabrefact/atom.xml" rel="self"/>
  
  <link href="https://sfarqu.github.io/fabrefact/"/>
  <updated>2019-11-08T08:45:15.267Z</updated>
  <id>https://sfarqu.github.io/fabrefact/</id>
  
  <author>
    <name>Sara Farquharson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Review: Doing Good Better</title>
    <link href="https://sfarqu.github.io/fabrefact/2019/11/08/Review-Doing-Good-Better/"/>
    <id>https://sfarqu.github.io/fabrefact/2019/11/08/Review-Doing-Good-Better/</id>
    <published>2019-11-08T05:54:20.000Z</published>
    <updated>2019-11-08T08:45:15.267Z</updated>
    
    <content type="html"><![CDATA[<p>One of my lifelong values has always been <em>making a positive impact on the world</em>. For a long time I lived paycheque-to-paycheque, but I still tried to put aside a percentage of my income for charitable giving. When I got a full-time software job, my income tripled overnight—which meant so did my donation budget.</p><p>This left me with an unexpected problem: now that I have more money to give, who should I give it to? Should I increase my monthly donation to the existing charities I support, or branch out to new ones? How can I do the <em>most</em> good with the resources I have?</p><p>That latter question is the one posed by William MacAskill’s book <a href="https://www.effectivealtruism.org/doing-good-better/" target="_blank" rel="noopener"><em>Doing Good Better: How Effective Altruism Can Help You Make A Difference</em></a>. I was excited to listen to this audiobook and finally have direction for my haphazard altruism.</p><h1 id="A-ruthless-efficiency"><a href="#A-ruthless-efficiency" class="headerlink" title="A ruthless efficiency"></a>A ruthless efficiency</h1><p>This book applies economics and scientific reasoning to altruism, resulting in a rational and often mind-bendingly ruthless approach to doing good.</p><p>As alluded to in <a href="/fabrefact/2019/11/01/what-I-m-reading-this-week/">last week’s reading list</a>, the book got off on a bit of a wrong foot with me with an early assertion that addressing global poverty is where you get the most effect for your dollar, so you should never donate to other causes that you are personally attached to. By this logic I should immediately cease donating to my local food bank, because the people in my community are not poor enough by global standards.</p><p>I do not disagree that my dollar can buy more food in sub-Saharan Africa, nor that the total amount of suffering in poor countries is greater than in Canada. At the same time it feels cold to only help faceless people in distant places and never my neighbours. The “effectiveness” argument presupposes that it is both possible and desirable for humans to be 100% logical, points I happen to think are more nuanced.</p><p>That said, I completely agree that personal attachment should not be the <em>only</em> consideration when choosing a cause to support. That’s why I have been struggling to decide where to spend my charitable dollars, and why I am swayed by the idea of picking a solution based on effectiveness.</p><p>Later chapters of Doing Good Better walk the initial assertion back a bit, both by introducing other topics that the Effective Altruism community considers worth supporting, and by including “personal fit” in the list of criteria you should consider when choosing a cause to donate, work, or volunteer for. Overall I found the book interesting, and it did provide some useful frameworks for evaluating different altruistic options.</p><h1 id="A-good-career-choice"><a href="#A-good-career-choice" class="headerlink" title="A good career choice"></a>A good career choice</h1><p>Memorable conclusions from this book include: being a software engineer who donates might be better for the world than working for a non-profit, buying Fair Trade does not help workers in poor countries, and sweatshops are good, actually, </p><p>There is a whole section on career choices, which crunches the numbers and declares that unless you are a particularly good fit for a specific role, you will probably do more good in the world by making a buttload of money and donating a percentage of your income to an effective charitable organization. Since I happen to like being a software developer, this is a comfortable conclusion!</p><p>Another section addresses ethical consumption, and makes some counter-intuitive judgements which amount to: ethical consumption doesn’t help very much, maybe you should buy the cheaper bananas and donate the difference.</p><h1 id="A-framework-for-everything"><a href="#A-framework-for-everything" class="headerlink" title="A framework for everything"></a>A framework for everything</h1><p>A quirk of powering through an audiobook in a short period of time is that repeated words stand out quite strongly, and MacAskill sure loves to introduce a framework! That said, this was the most useful part of the book for me—tools to help select a cause or charity to support are exactly what I was looking for. I’ve summarized a couple of the frameworks below. If you’re interested in more detail, I suggest looking on the <a href="https://www.effectivealtruism.org/" target="_blank" rel="noopener">Effective Altruism site</a> or reading the book.</p><h2 id="How-to-evaluate-an-intervention"><a href="#How-to-evaluate-an-intervention" class="headerlink" title="How to evaluate an intervention"></a>How to evaluate an intervention</h2><h4 id="1-How-many-people-benefit-and-by-how-much"><a href="#1-How-many-people-benefit-and-by-how-much" class="headerlink" title="1. How many people benefit, and by how much?"></a>1. How many people benefit, and by how much?</h4><p>To have the greatest impact on the world, you should aim to help a large number of people, and improve their lives by a large amount.</p><h4 id="2-Is-this-the-best-thing-you-can-do"><a href="#2-Is-this-the-best-thing-you-can-do" class="headerlink" title="2. Is this the best thing you can do?"></a>2. Is this the <em>best</em> thing you can do?</h4><p>The best programs are orders of magnitude more effective than merely <em>good</em> programs. Therefore, if you care about this cause, you should aid the very best solutions.</p><h4 id="3-Is-this-area-neglected"><a href="#3-Is-this-area-neglected" class="headerlink" title="3. Is this area neglected?"></a>3. Is this area neglected?</h4><p>You will have more of an impact by donating to causes that are not already widely supported</p><h4 id="4-What-would-happen-otherwise"><a href="#4-What-would-happen-otherwise" class="headerlink" title="4. What would happen otherwise?"></a>4. What would happen otherwise?</h4><p>If this action was never taken, what would the likely outcome be? If the answer is that it wouldn’t be that bad, or might be even better than the expected outcome of this action, it might be better not to do it.</p><h4 id="5-What-are-the-chances-of-success-and-how-good-would-success-be"><a href="#5-What-are-the-chances-of-success-and-how-good-would-success-be" class="headerlink" title="5. What are the chances of success, and how good would success be?"></a>5. What are the chances of success, and how good would success be?</h4><p>By this metric, a program that is very likely to succeed and have a small impact and a relatively unlikely result that would be a massive improvement are both worthy investments.</p><h2 id="How-to-evaluate-a-charity"><a href="#How-to-evaluate-a-charity" class="headerlink" title="How to evaluate a charity"></a>How to evaluate a charity</h2><h4 id="1-What-does-this-charity-do"><a href="#1-What-does-this-charity-do" class="headerlink" title="1. What does this charity do?"></a>1. What does this charity <em>do</em>?</h4><p>Beyond their advertising slogan, what <em>specific</em> actions or interventions does the charity take?</p><h4 id="2-How-cost-effective-is-each-program-area"><a href="#2-How-cost-effective-is-each-program-area" class="headerlink" title="2. How cost-effective is each program area?"></a>2. How cost-effective is each program area?</h4><p>How much benefit is your dollar going to create?</p><h4 id="3-How-robust-is-the-evidence-behind-each-program"><a href="#3-How-robust-is-the-evidence-behind-each-program" class="headerlink" title="3. How robust is the evidence behind each program?"></a>3. How robust is the evidence behind each program?</h4><p>Is there any proof that this intervention works?</p><h4 id="4-How-well-is-each-program-implemented"><a href="#4-How-well-is-each-program-implemented" class="headerlink" title="4. How well is each program implemented?"></a>4. How well is each program implemented?</h4><p>Even if the idea is sound, does this specific charity do a good job of implementing it?</p><h4 id="5-Does-the-charity-need-additional-funds"><a href="#5-Does-the-charity-need-additional-funds" class="headerlink" title="5. Does the charity need additional funds?"></a>5. Does the charity need additional funds?</h4><p>Does your donation make any perceptible difference to this charity’s ability to succeed?</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;One of my lifelong values has always been &lt;em&gt;making a positive impact on the world&lt;/em&gt;. For a long time I lived paycheque-to-paycheque, but I still tried to put aside a percentage of my income for charitable giving. When I got a full-time
        
      
    
    </summary>
    
    
      <category term="reading list" scheme="https://sfarqu.github.io/fabrefact/categories/reading-list/"/>
    
    
      <category term="books" scheme="https://sfarqu.github.io/fabrefact/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>Women Unite Over CTF - Solving Challenges</title>
    <link href="https://sfarqu.github.io/fabrefact/2019/11/05/Women-Unite-Over-CTF-Solving-Challenges/"/>
    <id>https://sfarqu.github.io/fabrefact/2019/11/05/Women-Unite-Over-CTF-Solving-Challenges/</id>
    <published>2019-11-05T00:04:02.000Z</published>
    <updated>2019-11-08T08:45:15.267Z</updated>
    
    <content type="html"><![CDATA[<p>The winner of the Women Unite Over CTF, Jaime Lightfoot, quickly posted writeups about how she solved the challenges. These posts (<a href="https://jaimelightfoot.com/blog/women-unite-over-ctf-networking-challenges/" target="_blank" rel="noopener">networking challenges</a>, <a href="https://jaimelightfoot.com/blog/women-unite-over-ctf-reverse-engineering-challenges/" target="_blank" rel="noopener">reverse engineering</a>, and <a href="https://jaimelightfoot.com/blog/women-unite-over-ctf-linux-exploitation/" target="_blank" rel="noopener">Linux exploitation</a>) are excellent for the same reasons I enjoyed the event in general: my main barrier to entry is not knowing what tools to use or what to look for.</p><p>I thought of including details of my own problem-solving approach in my <a href="/fabrefact/2019/11/02/WTF-is-a-CTF/">last post</a>, but I didn’t have the forethought to take any screenshots. Since I was working in a provided VM, I don’t even have any of the challenge files or tools on my own computer. However, I ended up solving exactly the same problems as two of Jaime’s posts, so here I will simply talk about how my solutions differed from hers.</p><h1 id="Networking-challenges"><a href="#Networking-challenges" class="headerlink" title="Networking challenges"></a>Networking challenges</h1><p>(See <a href="https://jaimelightfoot.com/blog/women-unite-over-ctf-networking-challenges/" target="_blank" rel="noopener">Women Unite Over CTF - Networking Challenges</a> for Jaime’s solutions, with screenshots.)</p><p>I opened up the networking challenges because technical difficulties delayed the start of the reverse engineering walkthroughs. I hovered over random icons in the Kali Linux VM, hoping that one of them was a tool for looking at network information. Luckily Wireshark was prominently placed!</p><p>I have literally never used Wireshark before, but it’s the tool everyone talks about so it seemed an obvious choice. I solved these pretty slowly, but now that I know a little bit about Wireshark I expect to be faster next time.</p><h3 id="level-1-helpfulwine"><a href="#level-1-helpfulwine" class="headerlink" title="level 1: helpfulwine"></a>level 1: helpfulwine</h3><p>As soon as I opened the file and selected a packet at random, the flag showed up in the bottom pane. My first flag! It took a bit of trial and error to figure out how to copy it—I eventually had to paste whatever I copied into a text editor in order to strip out all the extraneous content before pasting the flag into the form.</p><h3 id="level-2-rhetoricalairplane"><a href="#level-2-rhetoricalairplane" class="headerlink" title="level 2: rhetoricalairplane"></a>level 2: rhetoricalairplane</h3><p>Jaime used <code>frame contains &quot;flag&quot;</code> in all of these to narrow down which packet contained the flag text, but I just clicked around randomly until I found it.</p><h3 id="level-3-numberlesslove"><a href="#level-3-numberlesslove" class="headerlink" title="level 3: numberlesslove"></a>level 3: numberlesslove</h3><p>Again I just clicked around randomly looking for something called “flag”. Used the exact same strategy as Jaime here, which is heartening!</p><h3 id="level-4-warmsong"><a href="#level-4-warmsong" class="headerlink" title="level 4: warmsong"></a>level 4: warmsong</h3><p>This is where I slowed down a lot, because I didn’t know about the Export Objects function. I could see from the headers that it was a .docx so I assumed I had to extract the doc and open it…but I didn’t know how. I tried looking at a bunch of different packets, right clicking on things, copying and pasting the bytes into a file…eventually I realized this must be a common problem and started looking for an export function.</p><p>Once I successfully save the .doc, my next challenge was how to open a Word document in an unfamiliar OS. I searched for something like “how to open word doc linux command line” and learned <code>lowriter flag.doc</code>.</p><h3 id="level-5-savoryhill"><a href="#level-5-savoryhill" class="headerlink" title="level 5: savoryhill"></a>level 5: savoryhill</h3><p>Now that I knew about Export Objects function this went quickly. Export object as PNG, do a quick search to figure out what kind of program on Linux can open PNGs. The first search result suggested that <code>xdg-open</code> is a good way to open a file in its default program.</p><h1 id="Reverse-engineering-challenges"><a href="#Reverse-engineering-challenges" class="headerlink" title="Reverse engineering challenges"></a>Reverse engineering challenges</h1><p>(See <a href="https://jaimelightfoot.com/blog/women-unite-over-ctf-reverse-engineering-challenges/" target="_blank" rel="noopener">Women Unite Over CTF – Reverse Engineering Challenges</a> for Jaime’s solutions, with screenshots.)</p><p>The reverse engineering challenges had walkthroughs on the live stream, which is good because I definitely wouldn’t have gotten anywhere without them!</p><h3 id="level-1-calculateerratic"><a href="#level-1-calculateerratic" class="headerlink" title="level 1: calculateerratic"></a>level 1: calculateerratic</h3><p>I followed Nada’s walkthrough and used Binary Ninja, using the <code>View &gt; Strings</code> option Jaime mentions in the next problem. Nada talked about the <code>strings</code> command but I never tried it.</p><h3 id="level-2-dustyabandon"><a href="#level-2-dustyabandon" class="headerlink" title="level 2: dustyabandon"></a>level 2: dustyabandon</h3><p>The walkthroughs were also available as PDFs shared in the event Slack, so I started working a little ahead of the livestream. I spent a bunch of time in Binary Ninja, clicking on different views and trying to remember everything I ever knew about assembly.</p><p>I found the password-constructing subfunction (<code>sub_40100</code> highlighted in Jaime’s writeup), and the PDF said something about using <code>R</code> in Binary Ninja to switch to character representations, but I wasn’t able to make heads nor tails of this code and didn’t know what I was supposed to be switching. I waited for Nada’s livestream to catch up. It seemed obvious as soon as Nada pointed out the hex codes!</p><p>Definitely don’t recognize hex values in the ASCII range off the top of my head, but maybe that’s a skill to acquire?</p><h3 id="level-3-etherealshop"><a href="#level-3-etherealshop" class="headerlink" title="level 3: etherealshop"></a>level 3: etherealshop</h3><p>By now I expected a program with a similar design to the first two and opened it up in Binary Ninja to verify the same pattern of password comparison. I kind of went down a rabbit hole trying to understand what assembly was doing and tuned into the livestream to get back on track.</p><p>This is where my solution differed from Jaime’s by a lot—the documentation suggested switching to dynamic analysis so I opened up the program in Ollydbg. (Sorry no screenshots for this part.) I used an address I had found in Binary Ninja to get to the right section of code, but mostly poked around trying to understand the interface until Nada started talking about setting a breakpoint.</p><p>Breakpoints I understand! The step-in/step-over commands are similar to every IDE debugger I’ve used, so it didn’t take long to step through until the flag showed up in a register.</p><h3 id="level-4-expertquestion"><a href="#level-4-expertquestion" class="headerlink" title="level 4: expertquestion"></a>level 4: expertquestion</h3><p>By now the contest was well over, and the Escalate platform was actually quite responsive, so I decided to tackle one more difficult problem. This one didn’t have a walkthrough!</p><p>I started the same process I’d gone through with all the other RE problems. Like Jaime, I found that the password encryption now had three functions doing mysterious things to the encrypted password that looked very hairy to decipher in static analysis. Unlike Jaime, I did not have any insights over hard-coded bytes and encryption methods. Instead I opened up Ollydbg for some dynamic analysis.</p><p>This part was a bit of a slog. Unlike level 3, the password didn’t show up conveniently in the little window that seemed to hold the current instruction. When I stepped through the comparison of the user-entered text to the password, it instead went straight to the “You are not leet enough” message. I went back further and started stepping through the entire decryption function.</p><p>Throughout this I was trying to piece together more about how Ollydbg works. There’s a large pane in the top left that contains your program, and one on the top right that shows the contents of all the registers (as well as some other stuff that I never understood.) In the bottom right shows the stack—you can scroll down through it to see all the pointers in the call stack from other functions.</p><p>That left the pane in the lower left as being I assume the heap? While stepping through the decryption process I eventually saw stuff starting to change here. At first it appeared to be random gibberish, but it still looked like a clue.</p><p>The decryption has a bunch of loops, and I learned how to recognize what a loop looks like in assembly and skip to the next instruction if nothing relevant seems to happen inside. This was not the most efficient method, but I was worried if I skipped too far ahead I would miss the flag again!</p><p>After far too long of this, the flag unscrambled itself in the pane I decided was the heap. Victory!</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Jaime’s walkthroughs were a great refresher and a beginner-friendly introduction to some new techniques. I look forward to reading more from her, and maybe—just maybe—I’ll remember to take some screenshots of my own next time.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;The winner of the Women Unite Over CTF, Jaime Lightfoot, quickly posted writeups about how she solved the challenges. These posts (&lt;a href=&quot;https://jaimelightfoot.com/blog/women-unite-over-ctf-networking-challenges/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="events" scheme="https://sfarqu.github.io/fabrefact/categories/events/"/>
    
    
      <category term="security" scheme="https://sfarqu.github.io/fabrefact/tags/security/"/>
    
      <category term="ctf" scheme="https://sfarqu.github.io/fabrefact/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>WTF is a CTF? A beginner&#39;s adventure</title>
    <link href="https://sfarqu.github.io/fabrefact/2019/11/03/WTF-is-a-CTF/"/>
    <id>https://sfarqu.github.io/fabrefact/2019/11/03/WTF-is-a-CTF/</id>
    <published>2019-11-03T01:24:49.000Z</published>
    <updated>2019-11-08T08:45:15.267Z</updated>
    
    <content type="html"><![CDATA[<p>Today I reverse-engineered binaries and pored over packet captures to find hidden information under a deadline, thereby checking another box in my quest to be the coolest person my 14-year-old self could imagine. This was all part of <a href="https://ittakesahuman.com/lp/WomenUniteOverCTF.html" target="_blank" rel="noopener">Women Unite Over CTF</a>, an online competition hosted by a number of cybersecurity communities.</p><h2 id="So-what-is-a-CTF"><a href="#So-what-is-a-CTF" class="headerlink" title="So what is a CTF?"></a>So what <em>is</em> a CTF?</h2><p>A few weeks ago I had this exact question, after seeing the Women Unite event promoted by several people I follow on Twitter. A <a href="https://ctftime.org/ctf-wtf/" target="_blank" rel="noopener">quick search</a> told me CTF stands for “Capture the Flag”, and means a type of information security competition where players or teams compete to collect “flags” for points. This sounds, to be honest, <em>deeply intimidating</em>. </p><p>I may be a professional software developer, but I have never been a hacker. I don’t decompile software or use cheat codes in games, and I only switched my IDE to dark mode due to peer pressure from my coworkers. I hate the way the hacker stereotype involves taking joy from making other people feel stupid. I particularly hate feeling stupid.</p><p>But I <em>love</em> puzzle games.</p><p>Removed from the competitive aspect, a Capture the Flag event is solving a series of puzzles using techniques like forensics and cryptography. This sounds fun to me! But the problem remains: how do you learn those techniques if you’re just a regular person who has never considered exploiting a web server?</p><p>It turns out CTFs are <em>not</em> exclusively high-pressure clashes between technowizards who are out to crush your self esteem. Some events are explicitly aimed at beginners, and can serve as educational opportunities to get familiar with the tools and techniques.</p><h2 id="Women-Unite-Over-CTF"><a href="#Women-Unite-Over-CTF" class="headerlink" title="Women Unite Over CTF"></a>Women Unite Over CTF</h2><p>I clicked on the Women Unite event with the thought of sending it to my coworker, who is actively studying security. However, my attention was caught by wording like “laidback” and “we’ll give you a tutorial”. Could this be a friendly way to get started? I signed up on a whim.</p><h3 id="The-event"><a href="#The-event" class="headerlink" title="The event"></a>The event</h3><p>I was not precisely thrilled at getting up before 9am on a Saturday, but I was excited to learn new things! I still wasn’t convinced I would solve a single puzzle.</p><h4 id="The-bad"><a href="#The-bad" class="headerlink" title="The bad"></a>The bad</h4><p>The online event had a bit of a rough start. The competition was hosted on Point3 Security’s ESCALATE platform, which is supposed to provide a sandboxed environment full of well-designed challenges in various categories. Unfortunately, under the hammering of hundreds of attendees trying to log in, the system mostly provided 504 Gateway Timeouts.</p><p>Look, I get it. I work in the tech industry, and sometimes despite your best efforts your system falls over and users are angry. <em>However</em>, if you have a scheduled event coming up with a thousand people registered, please for the love of little fishes test what 1000 concurrent connections will do to your web app!</p><p>I didn’t care about prizes so wasn’t too bummed about the late start, but it was still frustrating. It took well over an hour before I could even log in, and even then clicking any link could take up to five minutes or time out entirely. Since completing each challenge took at least five clicks, this was a huge tax on participation.</p><h4 id="The-good"><a href="#The-good" class="headerlink" title="The good"></a>The good</h4><p>Even so, the ESCALATE platform was pretty cool. The provided Linux VM was stocked with every conceivable application used for decompiling or inspecting files, and the problems themselves escalated in difficulty in a way that I was able to take what I’d learned from one challenge and apply it to the next. After the competition was over and (I assume) most people had logged off, all the fancier features were able to load and I found the tool quite pleasant.</p><p>The best part, however, were the tutorials. On the livestream the presenter Nada gave walkthroughs for three of the reverse-engineering challenges, including demonstrating which tools to use and some of the features of those tools. This was, to my mind, the most critical part.</p><p>The tutorials themselves had some pretty advanced concepts compressed into a very short lesson, so I don’t know how they would feel for complete beginners. Since I already know how to code and even have a vague understanding of assembly language I got the most value out of the sections that explained the thought process of which tools to choose for which parts of the process. (Although the assembly reference was also essential—I didn’t have <em>that</em> strong an understanding going in!)</p><p>Due to the technical difficulties they extended the time of the contest and let everyone continue using the ESCALATE trial until the end of the day. This allowed me to keep plugging along at challenges on a system that was not currently being accidentally DDOSed. It was a rewarding and fun afternoon.</p><h3 id="The-results"><a href="#The-results" class="headerlink" title="The results"></a>The results</h3><p>I ended up solving 9 out of 28 challenges! I got all five in Network Foundations Level 1 and the easiest four Reverse Engineering problems. Three of those reverse engineering challenges had walkthroughs, but the last (and most complex!) I was able to extrapolate based on what I had learned in the previous lessons. The networking challenges I figured out for myself, starting from the knowledge of “Wireshark is a tool for looking at network stuff”.</p><p>I came out with a basic knowledge of how to use Wireshark, BinaryNinja, and Ollydbg. More generally I learned about static and dynamic analysis of binaries, and a little bit about when and why to use them.</p><p>After the event was over I was hype for more learning and signed up for a resource <a href="https://dev.to/atan/what-is-ctf-and-how-to-get-started-3f04" target="_blank" rel="noopener">recommended for newcomers</a>. Instead it has opaque problems with zero guidance labelled “very easy” and I hate it. Let’s just say there’s still room for improvement in this space.</p><p>Thanks to <a href="https://www.ittakesahuman.com/" target="_blank" rel="noopener">Point3 Security</a>, <a href="https://gatebreachers.org/" target="_blank" rel="noopener">Gatebreachers</a>, <a href="https://womenscyberjutsu.org/" target="_blank" rel="noopener">Women’s Society of Cyberjutsu</a>, <a href="https://twitter.com/WoSECtweets" target="_blank" rel="noopener">WoSEC</a>, and <a href="https://www.womenhackerz.com/" target="_blank" rel="noopener">WomenHackerz</a> for putting on an event that, technical difficulties aside, succeeded in making security feel accessible.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Today I reverse-engineered binaries and pored over packet captures to find hidden information under a deadline, thereby checking another box in my quest to be the coolest person my 14-year-old self could imagine. This was all part of &lt;a
        
      
    
    </summary>
    
    
      <category term="events" scheme="https://sfarqu.github.io/fabrefact/categories/events/"/>
    
    
      <category term="security" scheme="https://sfarqu.github.io/fabrefact/tags/security/"/>
    
      <category term="ctf" scheme="https://sfarqu.github.io/fabrefact/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>what I&#39;m reading this week</title>
    <link href="https://sfarqu.github.io/fabrefact/2019/11/01/what-I-m-reading-this-week/"/>
    <id>https://sfarqu.github.io/fabrefact/2019/11/01/what-I-m-reading-this-week/</id>
    <published>2019-11-01T03:26:57.000Z</published>
    <updated>2019-11-08T08:45:15.267Z</updated>
    
    <content type="html"><![CDATA[<p>These days I am reading a lot across many devices and then immediately misplacing the references. Instead, here are some things I found interesting this week.</p><ul><li><p><a href="https://segment.com/blog/the-10m-engineering-problem/" target="_blank" rel="noopener">The $10m engineering problem</a>, blog post about how Segment cut their infrastructure costs by 30%</p><ul><li>I found this fascinating! Hope to come back to it as I learn more about infrastructure design to see what else I can get out of it.</li></ul></li><li><p><em>Deep Work: rules for focused success in a distracted world</em> by Cal Newport (audiobook)</p><ul><li>This book mostly made me angry, but buried in the endless tedious anecdotes about white men being successful is at least a blog post’s worth of good advice.</li></ul></li><li><p><a href="https://arstechnica.com/gadgets/2019/10/how-a-months-old-amd-microcode-bug-destroyed-my-weekend/" target="_blank" rel="noopener">How a months-old AMD microcode bug destroyed my weekend</a> Ars Technica article about a bug in certain AMD processors whose onboard random number generator always returns the same value</p></li><li><p><em>Doing Good Better: effective altruism and how you can make a difference</em> by William MacAskill (audiobook)</p><ul><li>I was on board with this technique until he said one should <em>never</em> allow personal feelings toward an issue to influence your charitable giving. As I am still interested in effective altruism I will keep listening, but with greater skepticism.</li></ul></li><li><p>Xiang (Jenny) Ren, Kirk Rodrigues, Luyuan Chen, Camilo Vega, Michael Stumm, and Ding Yuan. 2019. <a href="https://doi.org/10.1145/3341301.3359640" target="_blank" rel="noopener">An analysis of performance evolution of Linux’s core operations</a>. In Proceedings of the 27th ACM Symposium on Operating Systems Principles (SOSP ‘19). ACM, New York, NY, USA, 554-569.</p><ul><li>This one digs pretty deep and I decided to come back to it after I finish the work about CPU architecture I have on hold</li></ul></li><li><p>Two Twitter-threads-turned-blog-posts on Errata Security: <a href="https://blog.erratasec.com/2019/08/thread-on-osi-model-is-lie.html" target="_blank" rel="noopener">Thread on the OSI model is a lie</a> and <a href="https://blog.erratasec.com/2019/08/thread-on-network-input-parsers.html" target="_blank" rel="noopener">Thread on network input parsers</a></p><ul><li>I never did learn networking properly in school, but I seem to be finding a flurry of sources on protocols and algorithms so maybe it’s time to stop being intimidated by the topic</li></ul></li><li><p>Amy Ousterhout, Adam Belay, and Irene Zhang. 2019. <a href="https://www.usenix.org/conference/hotcloud19/presentation/ousterhout" target="_blank" rel="noopener">Just in time delivery: leveraging operating systems knowledge for better datacenter congestion control</a>. In Proceedings of the 11th USENIX Conference on Hot Topics in Cloud Computing (HotCloud’19).</p><ul><li>In which the authors propose a Chimera operating system for datacenters, not to be confused with the <a href="http://www.cs.cmu.edu/~aml/chimera/chimera.html" target="_blank" rel="noopener">Chimera Real Time Operating System</a>.</li></ul></li><li><p><a href="https://www.infoq.com/presentations/rust-security-guarantees/" target="_blank" rel="noopener">The Most Secure Program Is One That Doesn’t Exist</a> by Diane Hosfelt (transcript of talk from QCon SF 2018)</p><ul><li>Watching talks about Rust is one step closer to learning Rust, right?</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;These days I am reading a lot across many devices and then immediately misplacing the references. Instead, here are some things I found interesting this week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://segment.com/blog/the-10m-engineering-problem/&quot;
        
      
    
    </summary>
    
    
      <category term="reading list" scheme="https://sfarqu.github.io/fabrefact/categories/reading-list/"/>
    
    
      <category term="papers" scheme="https://sfarqu.github.io/fabrefact/tags/papers/"/>
    
      <category term="links" scheme="https://sfarqu.github.io/fabrefact/tags/links/"/>
    
  </entry>
  
</feed>
